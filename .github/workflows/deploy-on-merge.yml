name: Deploy on PR merge

on:
  pull_request:
    types: [closed]

jobs:
  build:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.package-info.outputs.version }}
      name: ${{ steps.package-info.outputs.name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build library
        run: npm run build

      - name: Build example
        run: npm run build:example

      - name: Run smoke tests
        run: npm test

      - name: Extract package info
        id: package-info
        run: |
          echo "name=$(node -p "require('./package.json').name")" >> $GITHUB_OUTPUT
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Upload library build artifact
        uses: actions/upload-artifact@v4
        with:
          name: library-build
          path: build/
          retention-days: 7

      - name: Upload example build artifact
        uses: actions/upload-artifact@v4
        with:
          name: example-build
          path: dist/
          retention-days: 7

  check-version:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      should-publish: ${{ steps.version-check.outputs.should-publish }}
    steps:
      - name: Check if version exists on npm
        id: version-check
        run: |
          PKG_NAME="${{ needs.build.outputs.name }}"
          LOCAL_VERSION="${{ needs.build.outputs.version }}"
          echo "Package: $PKG_NAME, Local version: $LOCAL_VERSION"
          
          REMOTE_VERSION=$(npm view "$PKG_NAME" version 2>/dev/null || echo "")
          if [ -n "$REMOTE_VERSION" ]; then
            echo "Remote version: $REMOTE_VERSION"
          else
            echo "Remote version: not found"
          fi
          
          if [ "$REMOTE_VERSION" = "$LOCAL_VERSION" ]; then
            echo "Version unchanged; skipping npm publish"
            echo "should-publish=false" >> $GITHUB_OUTPUT
          else
            echo "Version changed; will publish to npm"
            echo "should-publish=true" >> $GITHUB_OUTPUT
          fi

  deploy-surge:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download example build artifact
        uses: actions/download-artifact@v4
        with:
          name: example-build
          path: ./dist

      - name: Deploy example to Surge
        run: |
          npm install --global surge
          echo "Deploying to vue-spinkit.surge.sh..."
          surge ./dist vue-spinkit.surge.sh --token "${{ secrets.SURGE_TOKEN }}"
        env:
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}

  publish-npm:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master' && needs.check-version.outputs.should-publish == 'true'
    needs: [build, check-version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Download library build artifact
        uses: actions/download-artifact@v4
        with:
          name: library-build
          path: ./build

      - name: Pre-publish diagnostics
        run: |
          echo "=== npm whoami ==="
          npm whoami || echo "Not authenticated"
          
          echo "=== Package info ==="
          echo "Name: ${{ needs.build.outputs.name }}"
          echo "Version: ${{ needs.build.outputs.version }}"
          
          echo "=== Current npm registry info (if exists) ==="
          npm view "${{ needs.build.outputs.name }}" || echo "Package not found on registry"
          
          echo "=== Files to be published ==="
          npm pack --dry-run
          
          echo "=== Verifying build directory ==="
          ls -la build/

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build.outputs.version }}
          release_name: Release v${{ needs.build.outputs.version }}
          body: |
            Release version ${{ needs.build.outputs.version }}
            
            Changes merged from PR #${{ github.event.pull_request.number }}
          draft: false
          prerelease: false
